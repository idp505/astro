package [%=targetPackage%].configuration.view.descriptions;

import java.util.Objects;

import org.eclipse.sirius.components.view.builder.IViewDiagramElementFinder;
import org.eclipse.sirius.components.view.builder.generated.DiagramBuilders;
import org.eclipse.sirius.components.view.builder.generated.ViewBuilders;
import org.eclipse.sirius.components.view.builder.providers.IColorProvider;
import org.eclipse.sirius.components.view.builder.providers.IEdgeDescriptionProvider;
import org.eclipse.sirius.components.view.diagram.ArrowStyle;
import org.eclipse.sirius.components.view.diagram.DeleteTool;
import org.eclipse.sirius.components.view.diagram.DiagramDescription;
import org.eclipse.sirius.components.view.diagram.DiagramFactory;
import org.eclipse.sirius.components.view.diagram.EdgeDescription;
import org.eclipse.sirius.components.view.diagram.EdgePalette;
import org.eclipse.sirius.components.view.diagram.LineStyle;
import org.eclipse.sirius.components.view.diagram.TargetEdgeEndReconnectionTool;

/**
 * automatically generated
 */
public class [%=edgeMappingAttributes.descriptionProvider%] implements IEdgeDescriptionProvider {

    public static final String NAME = "[%=edgeMappingAttributes.name%]";

    private final IColorProvider colorProvider;
    
    private final ViewBuilders viewBuilderHelper = new ViewBuilders();

    private final DiagramBuilders diagramBuilderHelper = new DiagramBuilders();

    public [%=edgeMappingAttributes.descriptionProvider%](IColorProvider colorProvider) {
        this.colorProvider = Objects.requireNonNull(colorProvider);
    }

    @Override
    public EdgeDescription create() {
        var edgeStyle = DiagramFactory.eINSTANCE.createEdgeStyle();
        edgeStyle.setColor(this.colorProvider.getColor("[%=edgeMappingAttributes.color%]"));
        edgeStyle.setEdgeWidth(1);
        edgeStyle.setLineStyle(LineStyle.[%=edgeMappingAttributes.lineStyle%]);
        edgeStyle.setSourceArrowStyle(ArrowStyle.[%=edgeMappingAttributes.sourceArrowStyle%]);
        edgeStyle.setTargetArrowStyle(ArrowStyle.[%=edgeMappingAttributes.targetArrowStyle%]);
        var edgeDescription = DiagramFactory.eINSTANCE.createEdgeDescription();
        edgeDescription.setName(NAME);
        edgeDescription.setCenterLabelExpression("[%=edgeMappingAttributes.feature%]");
        edgeDescription.setStyle(edgeStyle);
        edgeDescription.setSourceNodesExpression("aql:self");
        edgeDescription.setTargetNodesExpression("aql:self.[%=edgeMappingAttributes.feature%]");
        edgeDescription.setIsDomainBasedEdge(false);
        edgeDescription.setPalette(this.createEdgePalette());
        return edgeDescription;
    }
    
    private EdgePalette createEdgePalette() {
        return this.diagramBuilderHelper.newEdgePalette()
        		[%if(edgeMappingAttributes.hasDeleteTool){-%]
                	.deleteTool(this.createDeleteTool())
                [%}%]
                [%if(edgeMappingAttributes.hasTargetReconnectionTool){-%]
                	.edgeReconnectionTools(this.createTargetEdgeReconnectTool())
                [%}%]
                .build();
    }
    
	[%if(edgeMappingAttributes.hasDeleteTool){-%]
	    public DeleteTool createDeleteTool() {
	        var unsetElement = this.viewBuilderHelper.newUnsetValue()
	                .featureName("[%=edgeMappingAttributes.feature%]")
	                .elementExpression("var:semanticEdgeTarget");
	
	        var changeContext = this.viewBuilderHelper.newChangeContext()
	                .expression("var:semanticEdgeSource")
	                .children(unsetElement.build());
	
	        return this.diagramBuilderHelper.newDeleteTool()
	                .name("Delete")
	                .body(changeContext.build())
	                .build();
	    }
    [%}%]
    
    [%if(edgeMappingAttributes.hasTargetReconnectionTool){-%]
	    public TargetEdgeEndReconnectionTool createTargetEdgeReconnectTool() {
	        var changeContext = this.viewBuilderHelper.newChangeContext()
	                .expression("aql:edgeSemanticElement.changeTarget_[%=edgeMappingAttributes.description%]([%if(edgeMappingAttributes.isFeatureMultiValued){%]semanticReconnectionSource, semanticReconnectionTarget)[%}%][%else{%]semanticReconnectionTarget)[%}%]");
	
	        return this.diagramBuilderHelper.newTargetEdgeEndReconnectionTool()
	                .name("Target Reconnect")
	                .body(changeContext.build())
	                .build();
	    }
    [%}%]
    
	@Override
    public void link(DiagramDescription diagramDescription, IViewDiagramElementFinder cache) {
        var optional[%=edgeMappingAttributes.sourceType%]To[%=edgeMappingAttributes.targetType%]EdgeDescription = cache.getEdgeDescription(NAME);
        var optional[%=edgeMappingAttributes.sourceType%]SourceNodeDescription = cache.getNodeDescription([%=edgeMappingAttributes.sourceDescriptionProvider%].NAME);
        var optional[%=edgeMappingAttributes.targetType%]TargetNodeDescription = cache.getNodeDescription([%=edgeMappingAttributes.targetDescriptionProvider%].NAME);

        if (optional[%=edgeMappingAttributes.sourceType%]To[%=edgeMappingAttributes.targetType%]EdgeDescription.isPresent() && optional[%=edgeMappingAttributes.sourceType%]SourceNodeDescription.isPresent() && optional[%=edgeMappingAttributes.targetType%]TargetNodeDescription.isPresent()) {
            diagramDescription.getEdgeDescriptions().add(optional[%=edgeMappingAttributes.sourceType%]To[%=edgeMappingAttributes.targetType%]EdgeDescription.get());
            optional[%=edgeMappingAttributes.sourceType%]To[%=edgeMappingAttributes.targetType%]EdgeDescription.get().getSourceNodeDescriptions().add(optional[%=edgeMappingAttributes.sourceType%]SourceNodeDescription.get());
        	optional[%=edgeMappingAttributes.sourceType%]To[%=edgeMappingAttributes.targetType%]EdgeDescription.get().getTargetNodeDescriptions().add(optional[%=edgeMappingAttributes.targetType%]TargetNodeDescription.get());
        }
    }
    
}