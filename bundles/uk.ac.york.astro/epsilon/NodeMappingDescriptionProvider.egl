package [%=targetPackage%].configuration.view.descriptions;

import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
[%if(nodeMappingAttributes.outgoingEdges.select(c|c.hasCreateTool==true).size > 0){-%]
import java.util.Optional;
[%}%]

import org.eclipse.sirius.components.view.builder.IViewDiagramElementFinder;
import org.eclipse.sirius.components.view.builder.generated.DiagramBuilders;
[%if(nodeMappingAttributes.borderedNodeMappings.isDefined() and nodeMappingAttributes.borderedNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%]
	import org.eclipse.sirius.components.view.builder.generated.ViewBuilders;
[%}%]
import org.eclipse.sirius.components.view.builder.providers.IColorProvider;
import org.eclipse.sirius.components.view.builder.providers.INodeDescriptionProvider;
import org.eclipse.sirius.components.view.diagram.DiagramDescription;
import org.eclipse.sirius.components.view.diagram.DiagramFactory;
import org.eclipse.sirius.components.view.diagram.EdgeTool;
import org.eclipse.sirius.components.view.diagram.NodeDescription;
import org.eclipse.sirius.components.view.diagram.NodePalette;
[%if(nodeMappingAttributes.borderedNodeMappings.isDefined() and nodeMappingAttributes.borderedNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%]
	import org.eclipse.sirius.components.view.diagram.NodeTool;
	import org.eclipse.sirius.components.view.diagram.NodeToolSection;
[%}%]
import org.eclipse.sirius.components.view.diagram.SynchronizationPolicy;
import org.eclipse.sirius.components.view.diagram.UserResizableDirection;
import [%=targetPackage%].configuration.view.[%=nodeMappingAttributes.diagramAttributes.viewBuilder%];

/**
 * automatically generated
 */
@SuppressWarnings("checkstyle:MultipleStringLiterals")
public class [%=nodeMappingAttributes.descriptionProvider%] implements INodeDescriptionProvider {

    public static final String NAME = "[%=nodeMappingAttributes.name%]";

    private final IColorProvider colorProvider;

    private final DiagramBuilders diagramBuilderHelper = new DiagramBuilders();
    
	[%if(nodeMappingAttributes.borderedNodeMappings.isDefined() and nodeMappingAttributes.borderedNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%]
    	private final ViewBuilders viewBuilderHelper = new ViewBuilders();
    [%}%]

    private final [%=nodeMappingAttributes.diagramAttributes.viewBuilder%] [%=nodeMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%] = new [%=nodeMappingAttributes.diagramAttributes.viewBuilder%]();

    private final SynchronizationPolicy synchronizationPolicy;

    public [%=nodeMappingAttributes.descriptionProvider%](IColorProvider colorProvider, SynchronizationPolicy synchronizationPolicy) {
        this.colorProvider = Objects.requireNonNull(colorProvider);
        this.synchronizationPolicy = Objects.requireNonNull(synchronizationPolicy);
    }

    @Override
    public NodeDescription create() {
        return this.diagramBuilderHelper.newNodeDescription()
            	.name(NAME)
	            .domainType("[%=nodeMappingAttributes.domainClass%]")
	            .semanticCandidatesExpression("[%=nodeMappingAttributes.semanticCandidatesExpression%]")
	            .childrenLayoutStrategy(DiagramFactory.eINSTANCE.createFreeFormLayoutStrategyDescription())
				[%if(nodeMappingAttributes.labelIsInside){-%]
					.insideLabel(this.[%=nodeMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%].getInsideLabelDescription(this.colorProvider, "[%=nodeMappingAttributes.labelExpression%]"))
				[%} else {-%]
					.outsideLabels(this.[%=nodeMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%].getOutsideLabelDescription(this.colorProvider, "[%=nodeMappingAttributes.labelExpression%]"))
				[%}%]
	            .defaultHeightExpression("30")
	            .defaultWidthExpression("30")
	            .userResizable([%=nodeMappingAttributes.resizeDirection%])
	            .keepAspectRatio(true)
	            .style(this.[%=nodeMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%].createImageNodeStyleDescription([%=nodeMappingAttributes.diagramAttributes.viewBuilder%].[%=nodeMappingAttributes.svg%], this.colorProvider))
	            .synchronizationPolicy(this.synchronizationPolicy)
	            .build();
    }

   private NodePalette createNodePalette(IViewDiagramElementFinder cache, EdgeTool[] edgeTools) {

        return this.diagramBuilderHelper.newNodePalette()
       	 		[%if(nodeMappingAttributes.hasDeleteTool){-%]
                	.deleteTool(this.[%=nodeMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%].createDeleteTool())
                [%}%]
                [%if(nodeMappingAttributes.hasLabelEditTool){-%]
                	.labelEditTool(this.[%=nodeMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%].createLabelEditTool())
                [%}%]
                .edgeTools(edgeTools)
				[%if(nodeMappingAttributes.borderedNodeMappings.isDefined() and nodeMappingAttributes.borderedNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%]
       		    	.toolSections(this.createNodeToolSection(cache))[%}%] 
                .build();
    }
    
	[%if(nodeMappingAttributes.borderedNodeMappings.isDefined() and nodeMappingAttributes.borderedNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%]
	    private NodeToolSection createNodeToolSection(IViewDiagramElementFinder cache) {
	
	        return this.diagramBuilderHelper.newNodeToolSection()
	                .name("Creation Tools")
	                .nodeTools([% for (borderedNodeMapping in nodeMappingAttributes.borderedNodeMappings.select(c|c.hasCreateTool==true)) {-%]this.createNodeTool_Create[%=borderedNodeMapping.type%]()[%if(hasMore){%], [%}%][%}%])
	                .build();   
	    }
    [%}%]

	[% if(nodeMappingAttributes.borderedNodeMappings.isDefined()) {-%]
		[% for (borderedNodeMapping in nodeMappingAttributes.borderedNodeMappings.select(c|c.hasCreateTool==true)) {-%]
			private NodeTool createNodeTool_Create[%=borderedNodeMapping.type%]() {
	
				var changeContextNewInstance = this.viewBuilderHelper.newChangeContext()
		                .expression("aql:newInstance");

		    	var createInstance = this.viewBuilderHelper.newCreateInstance()
		                .typeName("[%=borderedNodeMapping.domainClass%]")
		                .referenceName("[%=borderedNodeMapping.feature%]")
		                .variableName("newInstance")
		                .children(changeContextNewInstance.build());

		        return this.diagramBuilderHelper.newNodeTool()
		                .name("[%=borderedNodeMapping.type%]")
		                .iconURLsExpression("/icons/full/obj16/[%=borderedNodeMapping.type%].gif")
		                .body(createInstance.build())
		                .build();
			}
		[%}%]
	[%}%]
	
	@Override
    public void link(DiagramDescription diagramDescription, IViewDiagramElementFinder cache) {
        cache.getNodeDescription(NAME).ifPresent(nodeDescription -> {
			List<EdgeTool> edgeTools = new LinkedList<>();
			[% for (edgeMappingAttributes in nodeMappingAttributes.outgoingEdges.select(c|c.hasCreateTool==true)) {-%]
				Optional<NodeDescription> optional[%=edgeMappingAttributes.targetType%]NodeDescription = cache.getNodeDescription([%=edgeMappingAttributes.targetDescriptionProvider%].NAME);
	            if (optional[%=edgeMappingAttributes.targetType%]NodeDescription.isPresent()) {
	                edgeTools.add(this.[%=nodeMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%].createEdgeTool_[%=edgeMappingAttributes.description%](optional[%=edgeMappingAttributes.targetType%]NodeDescription.get()));
	            }
			[%}%]
				
			nodeDescription.setPalette(this.createNodePalette(cache, edgeTools.toArray(new EdgeTool[0])));
            diagramDescription.getNodeDescriptions().add(nodeDescription);
            [%if(nodeMappingAttributes.borderedNodeMappings.isDefined()){-%]
	            [% for (borderedNodeMapping in nodeMappingAttributes.borderedNodeMappings) {-%]
	            	cache.getNodeDescription([%=borderedNodeMapping.descriptionProvider%].NAME).ifPresent(borderedNodeDescription -> nodeDescription.getReusedBorderNodeDescriptions().add(borderedNodeDescription));
	            [%}%]
            [%}%]
        });
    }

}