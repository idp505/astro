package [%=targetPackage%].configuration;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import org.eclipse.sirius.components.core.RepresentationMetadata;
import org.eclipse.sirius.components.core.api.IEditingContext;
import org.eclipse.sirius.components.emf.ResourceMetadataAdapter;
import org.eclipse.sirius.components.emf.services.JSONResourceFactory;
import org.eclipse.sirius.components.emf.services.api.IEMFEditingContext;
import org.eclipse.sirius.emfjson.resource.JsonResource;
import org.eclipse.sirius.web.persistence.entities.DocumentEntity;
import org.eclipse.sirius.web.persistence.repositories.IDocumentRepository;
import org.eclipse.sirius.web.persistence.repositories.IProjectRepository;
import org.eclipse.sirius.web.services.api.id.IDParser;
import org.eclipse.sirius.web.services.api.projects.IProjectTemplateInitializer;
import [%=targetPackage%].helper.StereotypeBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;

import io.micrometer.core.instrument.MeterRegistry;

/**
 * automatically generated
 */
@Configuration
public class [%=packageName.firstToUpperCase()%]ProjectTemplatesInitializer implements IProjectTemplateInitializer {

    static final String [%=packageName.toUpperCase()%]_MODEL_DOCUMENT_NAME = "[%=packageName.firstToUpperCase()%] Model";
    private final Logger logger = LoggerFactory.getLogger([%=packageName.firstToUpperCase()%]ProjectTemplatesInitializer.class);
    private final IProjectRepository projectRepository;
    private final IDocumentRepository documentRepository;
    private final StereotypeBuilder stereotypeBuilder;

    public [%=packageName.firstToUpperCase()%]ProjectTemplatesInitializer(IProjectRepository projectRepository, IDocumentRepository documentRepository, MeterRegistry meterRegistry) {
        this.projectRepository = Objects.requireNonNull(projectRepository);
        this.documentRepository = Objects.requireNonNull(documentRepository);
        this.stereotypeBuilder = new StereotypeBuilder("[%=packageName%]-template-initializer", meterRegistry);
    }

    @Override
    public boolean canHandle(String templateId) {
        return [%=packageName.firstToUpperCase()%]ProjectTemplatesProvider.[%=packageName.toUpperCase()%]_EXAMPLE_TEMPLATE_ID.equals(templateId);
    }

    @Override
    public Optional<RepresentationMetadata> handle(String templateId, IEditingContext editingContext) {
        Optional<RepresentationMetadata> representationMetadata = Optional.empty();
        if ([%=packageName.firstToUpperCase()%]ProjectTemplatesProvider.[%=packageName.toUpperCase()%]_EXAMPLE_TEMPLATE_ID.equals(templateId)) {
            representationMetadata = this.initialize[%=packageName.firstToUpperCase()%]Project(editingContext, [%=packageName.toUpperCase()%]_MODEL_DOCUMENT_NAME, this.createModel(), null);
        }
        return representationMetadata;
    }

    private String createModel() {
        String stereotypeBody = this.stereotypeBuilder.getStereotypeBody(List.of(new [%=packageName.firstToUpperCase()%]ExampleBuilder().getContent()));
        return stereotypeBody;
    }

    private Optional<RepresentationMetadata> initialize[%=packageName.firstToUpperCase()%]Project(IEditingContext editingContext, String documentName, String documentContent,
            Function<Resource, Optional<RepresentationMetadata>> createRepresentation) {
        Optional<RepresentationMetadata> result = Optional.empty();
        var optionalEditingDomain = Optional.of(editingContext).filter(IEMFEditingContext.class::isInstance)
                .map(IEMFEditingContext.class::cast)
                .map(IEMFEditingContext::getDomain);
        var editingContextUUID = new IDParser().parse(editingContext.getId());
        if (optionalEditingDomain.isPresent() && editingContextUUID.isPresent()) {
            AdapterFactoryEditingDomain adapterFactoryEditingDomain = optionalEditingDomain.get();
            ResourceSet resourceSet = adapterFactoryEditingDomain.getResourceSet();

            var optionalDomainDocumentEntity = this.projectRepository.findById(editingContextUUID.get()).map(projectEntity -> {
                DocumentEntity documentEntity = new DocumentEntity();
                documentEntity.setProject(projectEntity);
                documentEntity.setName(documentName);
                documentEntity.setContent(documentContent);

                documentEntity = this.documentRepository.save(documentEntity);
                return documentEntity;
            });

            if (optionalDomainDocumentEntity.isPresent()) {
                DocumentEntity documentEntity = optionalDomainDocumentEntity.get();

                JsonResource resource = new JSONResourceFactory().createResourceFromPath(documentEntity.getId().toString());
                resourceSet.getResources().add(resource);
                try (var inputStream = new ByteArrayInputStream(documentEntity.getContent().getBytes())) {
                    resource.load(inputStream, null);

                    if (createRepresentation != null) {
                        result = createRepresentation.apply(resource);
                    }

                } catch (IOException exception) {
                    this.logger.warn(exception.getMessage(), exception);
                }

                resource.eAdapters().add(new ResourceMetadataAdapter(documentName));

            }
        }
        return result;
    }

}