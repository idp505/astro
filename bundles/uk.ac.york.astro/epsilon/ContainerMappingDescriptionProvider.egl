package [%=targetPackage%].configuration.view.descriptions;

import java.util.Objects;
import org.eclipse.sirius.components.view.builder.IViewDiagramElementFinder;
import org.eclipse.sirius.components.view.builder.generated.DiagramBuilders;
[%if(containerMappingAttributes.subNodeMappings.isDefined() and containerMappingAttributes.subNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%] 
	import org.eclipse.sirius.components.view.builder.generated.ViewBuilders;
[%}%]
import org.eclipse.sirius.components.view.builder.providers.IColorProvider;
import org.eclipse.sirius.components.view.builder.providers.INodeDescriptionProvider;
import org.eclipse.sirius.components.view.diagram.DiagramDescription;
import org.eclipse.sirius.components.view.diagram.DiagramFactory;
import org.eclipse.sirius.components.view.diagram.NodeDescription;
import org.eclipse.sirius.components.view.diagram.NodePalette;
[%if(containerMappingAttributes.subNodeMappings.isDefined() and containerMappingAttributes.subNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%] 
	import org.eclipse.sirius.components.view.diagram.NodeTool;
	import org.eclipse.sirius.components.view.diagram.NodeToolSection;
[%}%]
import org.eclipse.sirius.components.view.diagram.RectangularNodeStyleDescription;
import org.eclipse.sirius.components.view.diagram.SynchronizationPolicy;
import org.eclipse.sirius.components.view.diagram.UserResizableDirection;
import [%=targetPackage%].configuration.view.[%=containerMappingAttributes.diagramAttributes.viewBuilder%];

/**
 * automatically generated
 */
@SuppressWarnings("checkstyle:MultipleStringLiterals")
public class [%=containerMappingAttributes.descriptionProvider%] implements INodeDescriptionProvider {

    public static final String NAME = "[%=containerMappingAttributes.name%]";

    private final IColorProvider colorProvider;

    private final DiagramBuilders diagramBuilderHelper = new DiagramBuilders();
    
    [%if(containerMappingAttributes.subNodeMappings.isDefined() and containerMappingAttributes.subNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%]
    	private final ViewBuilders viewBuilderHelper = new ViewBuilders();
	[%}%]
    private final [%=containerMappingAttributes.diagramAttributes.viewBuilder%] [%=containerMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%] = new [%=containerMappingAttributes.diagramAttributes.viewBuilder%]();

    private final SynchronizationPolicy synchronizationPolicy;

    public [%=containerMappingAttributes.descriptionProvider%](IColorProvider colorProvider, SynchronizationPolicy synchronizationPolicy) {
        this.colorProvider = Objects.requireNonNull(colorProvider);
        this.synchronizationPolicy = Objects.requireNonNull(synchronizationPolicy);
    }

    @Override
    public NodeDescription create() {
        return this.diagramBuilderHelper.newNodeDescription()
            	.name(NAME)
	            .domainType("[%=containerMappingAttributes.domainClass%]")
	            .semanticCandidatesExpression("[%=containerMappingAttributes.semanticCandidatesExpression%]")
	            .childrenLayoutStrategy(DiagramFactory.eINSTANCE.createFreeFormLayoutStrategyDescription())
				.outsideLabels(this.[%=containerMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%].getOutsideLabelDescription(this.colorProvider, "[%=containerMappingAttributes.labelExpression%]"))
	            .defaultHeightExpression("60")
	            .defaultWidthExpression("60")
	            .userResizable([%=containerMappingAttributes.resizeDirection%])
	            .keepAspectRatio(false)
				.style(this.getRectangularNodeStyleDescription("[%=containerMappingAttributes.backgroundColor%]", "[%=containerMappingAttributes.borderColor%]"))
	            .synchronizationPolicy(this.synchronizationPolicy)
	            .build();
    }
    
    private RectangularNodeStyleDescription getRectangularNodeStyleDescription(String background, String borderColor) {
        return this.diagramBuilderHelper.newRectangularNodeStyleDescription()
				.background(this.colorProvider.getColor(background))
                .borderColor(this.colorProvider.getColor(borderColor))
                .borderRadius(0)
                .build();
    }
    
    private NodePalette createNodePalette(IViewDiagramElementFinder cache) {

        return this.diagramBuilderHelper.newNodePalette()
        		[%if(containerMappingAttributes.hasDeleteTool){-%]
                	.deleteTool(this.[%=containerMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%].createDeleteTool())
                [%}%]
                [%if(containerMappingAttributes.hasLabelEditTool){-%]
                	.labelEditTool(this.[%=containerMappingAttributes.diagramAttributes.viewBuilder.firstToLowerCase()%].createLabelEditTool())
                [%}%]
				[%if(containerMappingAttributes.subNodeMappings.isDefined() and containerMappingAttributes.subNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%]
					.toolSections(this.createNodeToolSection(cache))
				[%}%]
                .build();
    }
    
	[%if(containerMappingAttributes.subNodeMappings.isDefined() and containerMappingAttributes.subNodeMappings.select(c|c.hasCreateTool==true).size > 0){-%] 
	    private NodeToolSection createNodeToolSection(IViewDiagramElementFinder cache) {
	
	        return this.diagramBuilderHelper.newNodeToolSection()
	                .name("Creation Tools")
	                .nodeTools([% for (subNodeMapping in containerMappingAttributes.subNodeMappings.select(c|c.hasCreateTool==true)) {-%]this.createNodeTool_Create[%=subNodeMapping.type%]()[%if(hasMore){%], [%}%][%}%])
	                .build();
	    }
    [%}%]
    
	[%if(containerMappingAttributes.subNodeMappings.isDefined()){-%]
		[% for (subNodeMapping in containerMappingAttributes.subNodeMappings.select(c|c.hasCreateTool==true)) {-%]
			private NodeTool createNodeTool_Create[%=subNodeMapping.type%]() {
	
				var changeContextNewInstance = this.viewBuilderHelper.newChangeContext()
		                .expression("aql:newInstance");

		    	var createInstance = this.viewBuilderHelper.newCreateInstance()
		                .typeName("[%=subNodeMapping.domainClass%]")
		                .referenceName("[%=subNodeMapping.feature%]")
		                .variableName("newInstance")
		                .children(changeContextNewInstance.build());
		
		        return this.diagramBuilderHelper.newNodeTool()
		                .name("[%=subNodeMapping.type%]")
		                .iconURLsExpression("/icons/full/obj16/[%=subNodeMapping.type%].gif")
		                .body(createInstance.build())
		                .build();
			}
		[%}%]
	[%}%]
	
	@Override
    public void link(DiagramDescription diagramDescription, IViewDiagramElementFinder cache) {
        cache.getNodeDescription(NAME).ifPresent(nodeDescription -> {
            diagramDescription.getNodeDescriptions().add(nodeDescription);
            nodeDescription.setPalette(this.createNodePalette(cache));
            [%if(containerMappingAttributes.subNodeMappings.isDefined()){-%]
	            [% for (subNodeMapping in containerMappingAttributes.subNodeMappings) {-%]
	            	cache.getNodeDescription([%=subNodeMapping.descriptionProvider%].NAME).ifPresent(subNodeDescription -> nodeDescription.getReusedChildNodeDescriptions().add(subNodeDescription));
	            [%}%]
            [%}%]
        });
    }

}